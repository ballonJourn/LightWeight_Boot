<?xml version="1.0" encoding="UTF-8"?>
<beans >

<!--修改配置顺序不影响ref的注入顺序-->
    <bean id="car" class="com.dylan.boot.Model.Car">
        <property name="name" value="Benz"/>
        <property name="width" value="4"/>
        <property name="wheel" ref="wheel"/>
        <property name="money" value="150000"/>
    </bean>
    <bean id="wheel" class="com.dylan.boot.Model.Wheel">
        <property name="name" value="luntai"/>
        <property name="brand" value="Michelin"/>
    </bean>

<!--

在这个表达式中：

execution 关键字指定了切入点表达式的类型。

* 表示匹配任何返回类型。

com.dylan.boot.Model.* 匹配 com.dylan.boot.Model 包下的任何类。

sayHelloWorld(..) 匹配名称为 "sayHelloWorld" 的任何方法，括号内的 .. 表示匹配任何参数。

因此，这个 AspectJ 表达式的含义是，它匹配 com.dylan.boot.Model 包下的任何类中的名称为 "sayHelloWorld" 的方法，以便将名为 "logInterceptor" 的切面（Advice）应用于这些方法。-->

    <bean id="helloService" class="com.dylan.boot.Model.HelloServiceImpl"/>

    <bean id="logInterceptor" class="com.dylan.boot.Model.LogInterceptor"/>

    <bean id="autoProxyCreator" class="com.dylan.boot.AOP.AspectJAwareAdvisorAutoProxyCreator"/>

    <bean id="helloServiceAspect" class="com.dylan.boot.AOP.AspectJExpressionPointcutAdvisor">
        <property name="advice" ref="logInterceptor"/>
        <property name="expression" value="execution(* com.dylan.boot.Model.*.sayHelloWorld(..))"/>
    </bean>

</beans>